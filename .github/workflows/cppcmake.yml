name: C/C++ CI

on:
  push:
    tags:
    - v*.*
  pull_request:
    branches:
    - master

env:
  APP_NAME: 'AudioCapture'
  LSL_URL: 'https://github.com/sccn/liblsl/releases/download'
  LSL_RELEASE: '1.13.0'
  LSL_RELEASE_SUFFIX: ''


jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
        - ubuntu-latest
        - windows-latest
        - macOS-latest
      fail-fast: false

    steps:
    - uses: actions/checkout@v2

    - name: CMake version
      run: cmake --version

    - name: download liblsl (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
           echo ${{ github.ref }}
           curl -L ${LSL_URL}/${LSL_RELEASE}${LSL_RELEASE_SUFFIX}/liblsl-${LSL_RELEASE}-Linux64-bionic.deb -o liblsl.deb
           sudo dpkg -i liblsl.deb
           sudo apt install -y qtbase5-dev qtmultimedia5-dev

    - name: download liblsl (Windows)
      if: matrix.os == 'windows-latest'
      run: |
           Invoke-WebRequest -Uri $Env:LSL_URL/$Env:LSL_RELEASE$Env:LSL_RELEASE_SUFFIX/liblsl-$Env:LSL_RELEASE-Win64.zip -o liblsl.7z
           7z x liblsl.7z -oLSL

    - name: download liblsl (macOS)
      if: matrix.os == 'macOS-latest'
      run: |
           curl -L ${LSL_URL}/${LSL_RELEASE}${LSL_RELEASE_SUFFIX}/liblsl-${LSL_RELEASE}-OSX64.tar.bz2 -o liblsl.tar.bz2
           mkdir LSL
           tar -xvf liblsl.tar.bz2 -C LSL
           brew install qt
           echo '::set-env name=CMAKE_PREFIX_PATH::/usr/local/opt/qt'

    - name: Install Qt
      if: matrix.os == 'windows-latest'
      # uses: jurplel/install-qt-action@v2
      uses: ouuan/install-qt-action@v2.3.1 # workaround until the aqtinstall timeout is fixed
      with:
        version: 5.14.0

    - name: Configure CMake
      shell: bash
      run: |
           cmake -S . -B build -DLSL_INSTALL_ROOT=$PWD/LSL/ -DCPACK_DEBIAN_PACKAGE_SHLIBDEPS=ON -DCPACK_DEBIAN_PACKAGE_DEPENDS=1

    - name: Make
      run: cmake --build build --config Release -j

    - name: Install
      run: cmake --build build --config Release -j --target install

    - name: Package (ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: cmake --build build --config Release -j --target package

    - name: Package (macOS)
      if: matrix.os == 'macOS-latest'
      run: |
        cd build
        for app in *.app; do
            /usr/local/opt/qt/bin/macdeployqt ${app} -dmg
            mv "${app%.app}.dmg" "${app%.app}-${LSL_RELEASE}-MacOS64.dmg"
        done

    - name: TestA
      run: |
        pwd
        ls
        ls build
        pwd
        ls build/install

    - name: Upload Artifacts (ubuntu)
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@master
      with:
        name: pkg-${{ matrix.os }}
        path: build/${AudioCapture}-0.1-Linux64-bionic.deb
    
    - name: Upload Artifacts (macOS)
      if: matrix.os == 'macOS-latest'
      uses: actions/upload-artifact@master
      with:
        name: pkg-${{ matrix.os }}
        path: build/${AudioCapture}-${LSL_RELEASE}-MacOS64.dmg
    
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      id: create_release
      uses: actions/create-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Download artifact - ubuntu
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/download-artifact@v1
      with:
        name: pkg-ubuntu-latest

    - name: Download artifact - windows
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/download-artifact@v1
      with:
        name: pkg-windows-latest

    - name: Download artifact - macos
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/download-artifact@v1
      with:
        name: pkg-macOS-latest

    - name: TestB
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        pwd
        ls -all
        ls pkg-ubuntu-latest

    - name: Upload Release Asset
      if: startsWith(github.ref, 'refs/tags/')
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing its ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: pkg-ubuntu-latest
        asset_name: pkg-ubuntu-latest
        asset_content_type: application/zip
